syntax = "proto3";

option java_multiple_files = true;
option java_package = "RideShareService.grpcspringbootexample";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

// GRPC functions offered by micro service
service RideShareService {
  //Add Booking
  rpc OfferRide (OfferRideRequest) returns (OfferRideResponse);
  rpc BookSeat (BookSeatRequest) returns (BookSeatResponse);
  //Pseudo get all function for now
  rpc getClosestSuggestionsResults (TimePlace) returns (AvailableRideshare);

  //rpc setStartTimeOnAvailableRS (TimePlace) returns (ServerResponse);
  //rpc setEndTimeOnRSAvailableRS (TimePlace) returns (ServerResponse);
  //rpc setStartTimeOnBookingRS (TimePlace) returns (ServerResponse);
  //rpc setEndTimeOnBookingRS (TimePlace) returns (ServerResponse);

}

//Customer having booked a car, wants to offer available seats
message OfferRideRequest {
  string bookingref = 1; // CRS_ID (reference to car booking table)
  int32 availablespaces = 2; // SMALLINT
  string startdate = 3; // DATE as string in YYYY-MM-DD format
  string starttime = 4; // TIME as string in HH:MM:SS format
  string startlocation = 5; // CRS_ADDRESS
  string enddate = 6; // TIME as string in HH:MM:SS format
  string endtime = 7; // TIME as string in HH:MM:SS format
  string endlocation = 8; // CRS_ADDRESS
  float price = 9; // CRS_CURRENCY (published price)
}

//Server response to OfferRideRequest
message OfferRideResponse {
  bool success = 1;
  string message = 2;
}

//Customer wants to book available seat
message BookSeatRequest {
  string rideId = 1; // CRS_ID (reference to available_rideshare)
  string userId = 2; // CRS_ID (reference to Customer Table)
  string startlocation = 3; // CRS_ADDRESS
  string endlocation = 4; // CRS_ADDRESS
  float price = 5; // CRS_CURRENCY (customer price)
}

//Server response to BookSeatRequest
message BookSeatResponse {
  bool success = 1;
  string message = 2;
}

message AvailableRideshareList {
  repeated AvailableRideshare result_list = 1;
}

// Available rideshare definition
message AvailableRideshare {
  int64 bookingid = 1; // CRS_ID
  int32 availablespaces = 2; // SMALLINT
  string status = 3; // CRS_NAME (status: full, partially booked, or cancelled)
  string startdate = 4; // DATE as string in YYYY-MM-DD format
  string starttime = 5; // TIME as string in HH:MM:SS format
  string startlocation = 6; // CRS_ADDRESS
  string enddate = 7; // TIME as string in HH:MM:SS format
  string endtime = 8; // TIME as string in HH:MM:SS format
  string endlocation = 9; // CRS_ADDRESS
  float price = 10; // CRS_CURRENCY (published price)
  string bookingref = 11; // CRS_ID (reference to car booking table)
}

message BookingRideshareList {
  repeated BookingRideshare result_list = 1;
}

//Booked ride share definition
message BookingRideshare {
  string bookingid = 1; // CRS_ID
  string status = 2; // only for internal use?
  string startdate = 3; // DATE as string in YYYY-MM-DD format
  string startlocation = 4; // CRS_ADDRESS
  string enddate = 5; // DATE as string in YYYY-MM-DD format
  string endlocation = 6; // CRS_ADDRESS
  float price = 7; // CRS_CURRENCY (customer price)
  string customerid = 8; // CRS_ID
  string bookingref = 9; // CRS_ID (reference to available_rideshare)
}

message PriceReferenceInfoList {
  repeated PriceReferenceInfo result_list = 1;
}

//Function used to transfer partial data, maybe to booking confirmation/receipt creation
message PriceReferenceInfo {
  string bookingid = 1; // CRS_ID
  float price = 2; // CRS_CURRENCY (customer price)
  string customerid = 3; // CRS_ID
  string bookingref = 4; // CRS_ID (reference to available_rideshare)
}

message TimePlaceList {
  repeated TimePlace result_list = 1;
}

//Function used to transfer partial data, maybe to booking confirmation/receipt creation
message TimePlace {
  string bookingid = 1;
  string date = 2;
  string time = 3;
  string location = 4;
}
/*
//Function used to transfer partial data, maybe to booking confirmation/receipt creation
message Location {
  string location = 1; // CRS_ADDRESS
}

message ServerResponse{
  bool success = 1;
  string message = 2;
}
*/
/* TODO: Sub types which might be implemented as part of more complex business logic in micro service
message Location {
  string country = 1;
  string region = 2;
  string city = 3;
  string road = 4;
  string number = 5;
  string altname = 6;
}
*/