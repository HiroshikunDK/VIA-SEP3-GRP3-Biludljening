@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Shared.Dto

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="loginModel.Username" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>

    <button type="submit">Login</button>
</EditForm>

@if (loginMessage != null)
{
    <p>@loginMessage</p>
}

@code {
    private LoginRequestDto loginModel = new LoginRequestDto();
    private string loginMessage;

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("Attempting to retrieve anti-forgery token...");

            // Retrieve the anti-forgery token at the time of login
            var antiForgeryToken = await JS.InvokeAsync<string>("getAntiForgeryToken");

            Console.WriteLine($"Anti-forgery token retrieved: {antiForgeryToken}");

            if (string.IsNullOrEmpty(antiForgeryToken))
            {
                loginMessage = "Failed to retrieve anti-forgery token.";
                return;
            }

            // Create and configure the HTTP client
            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            httpClient.DefaultRequestHeaders.Add("X-CSRF-TOKEN", antiForgeryToken);

            // Send the POST request
            var response = await httpClient.PostAsJsonAsync("api/user/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    // Save the token in local storage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    loginMessage = "Login failed. Please check your credentials.";
                }
            }
            else
            {
                loginMessage = "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            loginMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error during HandleLogin: {ex}");
        }
    }
}
