@page "/payment/{bookingId:int}"
@using Shared.Dto
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Payment</h3>

<EditForm Model="payment" OnValidSubmit="SubmitPayment">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Credit Card Number:</label>
        <InputText @bind-Value="creditCardNumber" />
    </div>
    <div>
        <label>Expiration Date (MM/YY):</label>
        <InputText @bind-Value="expirationDate" />
    </div>
    <button type="submit">Pay</button>
</EditForm>

@code {
    [Parameter] public int BookingId { get; set; }

    private PaymentRequestDto payment = new PaymentRequestDto();
    private string creditCardNumber;
    private string expirationDate;

    private async Task SubmitPayment()
    {
        payment.Booking = BookingId;
        payment.Status = "Pending";
        payment.BookingType = 1; // Assuming 1 represents a car booking, adjust as needed

        // Convert CreditCardNumber to a long for the request
        if (long.TryParse(creditCardNumber.Replace(" ", ""), out var creditCardRef))
        {
            payment.CreditCardRef = creditCardRef;
        }
        else
        {
            Console.WriteLine("Invalid credit card number.");
            return;
        }

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            var payload = System.Text.Json.JsonSerializer.Serialize(payment, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
            Console.WriteLine("Payment Payload: " + payload);

            var response = await client.PostAsJsonAsync("api/payment", payment);
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Payment Response: {responseContent}");
                NavigationManager.NavigateTo("/confirmation");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to process payment. Response Code: {response.StatusCode}");
                Console.WriteLine("Error Response: " + errorResponse);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing payment: {ex.Message}");
        }
    }
}
