@page "/payment/{bookingId:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Dto
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Payment</h3>

<EditForm Model="payment" OnValidSubmit="SubmitPayment">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Credit Card Number:</label>
        <InputText @bind-Value="creditCardNumber" />
    </div>
    <div>
        <label>Expiration Date (MM/YY):</label>
        <InputText @bind-Value="expirationDate" />
    </div>
    <button type="submit">Pay</button>
</EditForm>

@code {
    [Parameter] public int BookingId { get; set; }

    private PaymentRequestDto payment = new PaymentRequestDto();
    private string creditCardNumber;
    private string expirationDate;

    private async Task SubmitPayment()
    {
        payment.Booking = BookingId;
        payment.Status = "Pending";
        payment.BookingType = 1;

        // Validate credit card number
        string sanitizedCreditCardNumber = creditCardNumber.Replace(" ", "").Trim();
        if (!int.TryParse(sanitizedCreditCardNumber, out int creditCardRef))
        {
            Console.WriteLine("Invalid credit card number.");
            return;
        }
        payment.CreditCardRef = creditCardRef;

        // Retrieve the Customer ID dynamically
        payment.Customer = await GetCurrentCustomerIdAsync();

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        try
        {
            var response = await client.PostAsJsonAsync("api/payment", payment);
            if (response.IsSuccessStatusCode)
            {
                var paymentObj = await response.Content.ReadFromJsonAsync<PaymentCreationResponseDto>();
                Console.WriteLine($"Payment Response Data: {System.Text.Json.JsonSerializer.Serialize(paymentObj)}");
                
                if (paymentObj != null && paymentObj.PaymentId > 0)
                {
                    // Navigate to confirmation with bookingId & paymentId
                    NavigationManager.NavigateTo($"/confirmation?bookingId={BookingId}&paymentId={paymentObj.PaymentId}");
                }
                else
                {
                    Console.WriteLine("PaymentId not found in response.");
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to process payment. Response Code: {response.StatusCode}");
                Console.WriteLine("Error Response: " + errorResponse);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing payment: {ex.Message}");
        }
    }

    private async Task<int> GetCurrentCustomerIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var customerIdClaim = user.FindFirst("id");
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out var customerId))
            {
                return customerId;
            }
        }

        throw new InvalidOperationException("Unable to retrieve CustomerId from claims.");
    }
}
