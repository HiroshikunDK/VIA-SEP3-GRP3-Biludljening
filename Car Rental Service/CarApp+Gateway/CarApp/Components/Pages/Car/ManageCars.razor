@page "/manage-cars"
@using Shared.Dto.Car
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Manage Cars</h3>

@if (_cars == null)
{
    <p>Loading...</p>
}
else if (!_cars.Any())
{
    <p>No cars available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Car ID</th>
                <th>VIN</th>
                <th>Model</th>
                <th>Manufacturer</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var car in _cars)
        {
            <tr>
                <td>@car.CarId</td>
                <td>@car.Vin</td>
                <td>@car.Model</td>
                <td>@car.Manufacturer</td>
                <td>
                    <button class="btn btn-info" @onclick="() => NavigateToEditCar(car.CarId)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteCar(car.CarId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<button class="btn btn-primary mt-3" @onclick="NavigateToAddCar">Add New Car</button>

@code {
    private List<CarDto> _cars = new();
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            _cars = await client.GetFromJsonAsync<List<CarDto>>("api/car");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading cars: {ex.Message}";
        }
    }

    private void NavigateToAddCar()
    {
        NavigationManager.NavigateTo("/addcar");
    }

    private void NavigateToEditCar(int carId)
    {
        NavigationManager.NavigateTo($"/editcar/{carId}");
    }

    private async Task DeleteCar(int carId)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.DeleteAsync($"api/car/{carId}");
            if (response.IsSuccessStatusCode)
            {
                _cars = _cars.Where(car => car.CarId != carId).ToList(); // Remove locally
            }
            else
            {
                _errorMessage = "Failed to delete car.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error deleting car: {ex.Message}";
        }
    }
}
