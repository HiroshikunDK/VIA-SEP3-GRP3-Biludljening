@page "/RideShareRequestList"
@inject RideShareRequestService RideShareRequestService
@using CarApp.Services.RideShare
@using Shared.Dto
@using Shared.Dto.RideShare

<h3>Ride Share Requests</h3>

@if (rideShareRequests == null)
{
    <p>Loading...</p>
}
else if (rideShareRequests.Length == 0)
{
    <p>No ride share requests available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ride ID</th>
                <th>Status</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in rideShareRequests)
            {
                <tr>
                    <td>@request.RideId</td>
                    <td>@request.Status</td>
                    <td>@request.StartDate</td>
                    <td>@request.EndDate</td>
                    <td>@request.Price</td>
                    <td>
                        <button @onclick="() => OpenEditModal(request)" class="btn btn-primary">Edit</button>
                        <button @onclick="() => DeleteRequest(request.RideId)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Edit Modal -->
@if (isEditModalVisible)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Ride Share Request</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editRequest">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <InputText id="startDate" class="form-control" @bind-Value="editRequest.StartDate" />
                        </div>

                        <div class="form-group">
                            <label for="startTime">Start Time</label>
                            <InputText id="startTime" class="form-control" @bind-Value="editRequest.StartTime" />
                        </div>

                        <div class="form-group">
                            <label for="endDate">End Date</label>
                            <InputText id="endDate" class="form-control" @bind-Value="editRequest.EndDate" />
                        </div>

                        <div class="form-group">
                            <label for="endTime">End Time</label>
                            <InputText id="endTime" class="form-control" @bind-Value="editRequest.EndTime" />
                        </div>

                        <div class="form-group">
                            <label for="startLocation">Start Location</label>
                            <InputText id="startLocation" class="form-control" @bind-Value="editRequest.StartLocation" />
                        </div>

                        <div class="form-group">
                            <label for="endLocation">End Location</label>
                            <InputText id="endLocation" class="form-control" @bind-Value="editRequest.EndLocation" />
                        </div>

                        <div class="form-group">
                            <label for="price">Price</label>
                            <InputNumber id="price" class="form-control" @bind-Value="editRequest.Price" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="button" class="btn btn-primary" @onclick="SaveRequest">Save changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private RideShareRequestDto[] rideShareRequests;
    private RideShareRequestDto editRequest;
    private bool isEditModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            rideShareRequests = makeTestObjects();
            // Uncomment to fetch from the backend
            //rideShareRequests = await RideShareRequestService.GetAllRideShareRequestsAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void OpenEditModal(RideShareRequestDto request)
    {
        editRequest = new RideShareRequestDto
        {
            RideId = request.RideId,  // Read-only field
            Status = request.Status,  // Read-only field
            CustomerId = request.CustomerId,  // Read-only field
            StartDate = request.StartDate,
            StartTime = request.StartTime,
            EndDate = request.EndDate,
            EndTime = request.EndTime,
            StartLocation = request.StartLocation,
            EndLocation = request.EndLocation,
            Price = request.Price
        };

        isEditModalVisible = true;
    }

    private void CloseModal()
    {
        isEditModalVisible = false;
    }

    private async Task SaveRequest()
    {
        try
        {
            var success = await RideShareRequestService.UpdateRideShareRequestAsync(editRequest);
            if (success)
            {
                // Refresh the list with updated data
                rideShareRequests = await RideShareRequestService.GetAllRideShareRequestsAsync();
                CloseModal();
            }
            else
            {
                Console.WriteLine("Error saving changes.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");
            CloseModal();
        }
    }

    private async Task DeleteRequest(string rideId)
    {
        var success = await RideShareRequestService.DeleteRideShareRequestAsync(rideId);
        if (success)
        {
            // Refresh the list after deletion
            rideShareRequests = await RideShareRequestService.GetAllRideShareRequestsAsync();
        }
        else
        {
            Console.WriteLine("Error deleting request.");
        }
    }

    // Test data for the list (use API for actual data)
    private RideShareRequestDto[] makeTestObjects()
    {
        RideShareRequestDto[] rideShareRequestsLocal = new RideShareRequestDto[]
        {
            new RideShareRequestDto
            {
                RideId = "RS123",
                Status = "Requested",
                StartDate = "2024-12-10",
                StartTime = "08:00:00",
                StartLocation = "Location A",
                EndDate = "2024-12-10",
                EndTime = "10:00:00",
                EndLocation = "Location B",
                Price = 50.0f,
                CustomerId = "CUS001",
                BookingRef = "BOOK123"
            },
            new RideShareRequestDto
            {
                RideId = "RS124",
                Status = "Confirmed",
                StartDate = "2024-12-12",
                StartTime = "09:30:00",
                StartLocation = "Location B",
                EndDate = "2024-12-12",
                EndTime = "11:30:00",
                EndLocation = "Location C",
                Price = 60.0f,
                CustomerId = "CUS002",
                BookingRef = "BOOK124"
            }
        };
        return rideShareRequestsLocal;
    }
}
