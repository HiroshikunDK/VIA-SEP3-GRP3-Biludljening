@page "/booking-details/{carId:int}"
@using CarApp.Services.RideShareOffer
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Dto
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RideShareOfferService RideShareOfferService

<h3>Booking Details</h3>

<EditForm Model="_booking" OnValidSubmit="SubmitBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Start Date:</label>
        <InputDate @bind-Value="_booking.StartDate" />
    </div>
    <div>
        <label>Start Time:</label>
        <input type="time" @bind="_booking.StartTime" />
    </div>
    <div>
        <label>End Date:</label>
        <InputDate @bind-Value="_booking.EndDate" />
    </div>
    <div>
        <label>End Time:</label>
        <input type="time" @bind="_booking.EndTime" />
    </div>
    
    <fieldset>
        <legend>Would you like to share your rented car?:</legend>
        <div>
            <input type="checkbox" id="rideshareCB" name="scales" @bind="_checkedValue"/>
            <label for="rideshareCB">Create a Ride Share</label>
        </div>
    </fieldset>
    
    <button type="submit">Proceed to Payment</button>
</EditForm>

@code {
    [Parameter] public int CarId { get; set; }

    private readonly BookingDto _booking = new BookingDto();

    private bool _checkedValue;
        
    private async Task SubmitBooking()
    {
        _booking.CarId = CarId;

        try
        {
            // Fetch CustomerId dynamically
            _booking.CustomerId = await GetCurrentCustomerIdAsync();

            var client = HttpClientFactory.CreateClient("AuthorizedClient");

            var payload = System.Text.Json.JsonSerializer.Serialize(_booking, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
            Console.WriteLine("Booking Payload: " + payload);

            // Create the booking
            var bookingResponse = await client.PostAsJsonAsync("api/bookingcar", _booking);
            if (bookingResponse.IsSuccessStatusCode)
            {
                var responseObject = await bookingResponse.Content.ReadFromJsonAsync<BookingResponse>();
                if (responseObject != null && responseObject.BookingId > 0)
                {
                    Console.WriteLine($"Booking ID: {responseObject.BookingId}");
                    if (_checkedValue)
                    {
                        RideShareOfferService.RedirectToCreateRideShareOffer(responseObject.BookingId.ToString(),_booking.CustomerId.ToString(),NavigationManager);
                    }

                    // Now that we have the bookingId, navigate to the payment page
                    NavigationManager.NavigateTo($"/payment/{responseObject.BookingId}");
                }
                else
                {
                    Console.WriteLine("BookingId not found in booking response.");
                }
            }
            else
            {
                var errorResponse = await bookingResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to create booking. Response Code: {bookingResponse.StatusCode}");
                Console.WriteLine("Error Response: " + errorResponse);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating booking: {ex.Message}");
        }
    }

    private async Task<int> GetCurrentCustomerIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var customerIdClaim = user.FindFirst("id"); // Ensure the claim "id" exists
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out var customerId))
            {
                return customerId;
            }
        }

        throw new InvalidOperationException("Unable to retrieve CustomerId from claims.");
    }
}
