@page "/register"
@inject HttpClient HttpClient
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Shared.Dto

<h3>Register</h3>

<EditForm Model="registerUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="registerUser.Username" />
    </div>

    <div>
        <label>Email:</label>
        <InputText @bind-Value="registerUser.Email" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="registerUser.Password" type="password" />
    </div>

    <button type="submit">Register</button>
</EditForm>

@if (registrationMessage != null)
{
    <p>@registrationMessage</p>
}

@code {
    private RegisterUserRequestDto registerUser = new RegisterUserRequestDto();
    private string registrationMessage;

    private async Task HandleRegister()
    {
        try
        {
            // Retrieve the anti-forgery token
            var token = await JS.InvokeAsync<string>("getAntiForgeryToken");
            Console.WriteLine("Retrieved token:", token); // Check if token is retrieved correctly

            // Create a new HttpRequestMessage to ensure the header is only added for this request
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, "api/user/register")
            {
                Content = JsonContent.Create(registerUser)
            };
            requestMessage.Headers.Add("X-CSRF-TOKEN", token); // Set token header

            // Send the request and log response status
            var response = await HttpClient.SendAsync(requestMessage);
            Console.WriteLine("Registration response status:", response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                registrationMessage = "Registration successful!";
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                registrationMessage = $"Registration failed: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            registrationMessage = $"Error: {ex.Message}";
        }
    }
}