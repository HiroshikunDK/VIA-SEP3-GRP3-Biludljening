@page "/deleteuser"
@attribute [Authorize(Roles = "Admin")]

@using Shared.Dto
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient HttpClient

<h3>Delete User</h3>

<div class="form-group">
    <label for="userId">User ID:</label>
    <input id="userId" class="form-control" @bind="userId" type="number" placeholder="Enter User ID" />
</div>

<button class="btn btn-danger" @onclick="DeleteUserr">Delete User</button>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private int userId;
    private string? successMessage;
    private string? errorMessage;

    private async Task DeleteUserr()
    {
        successMessage = null;
        errorMessage = null;

        try
        {
            var response = await HttpClient.DeleteAsync($"api/user/{userId}");

            if (response.IsSuccessStatusCode)
            {
                // Handle successful deletion (e.g., returning a message)
                var responseContent = await response.Content.ReadAsStringAsync();
            
                if (responseContent.Contains("User not found"))
                {
                    errorMessage = $"User with ID {userId} does not exist.";
                }
                else
                {
                    successMessage = $"User with ID {userId} was successfully deleted.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = $"User with ID {userId} was not found.";
            }
            else
            {
                errorMessage = $"Failed to delete user. {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}