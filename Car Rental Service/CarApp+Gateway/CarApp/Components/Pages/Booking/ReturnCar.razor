@page "/return-car"
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Dto.Booking
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Return a Car</h3>

@if (reservations == null)
{
    <p>Loading...</p>
}
else if (!reservations.Any())
{
    <p>No reservations found. You have not rented any cars.</p>
}
else
{
    <h4>Your Reservations</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Booking ID</th>
                <th>Car ID</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reservation in reservations)
            {
                <tr>
                    <td>@reservation.BookingNr</td>
                    <td>@reservation.CarId</td>
                    <td>@reservation.StartDate?.ToString("yyyy-MM-dd")</td>
                    <td>@reservation.EndDate?.ToString("yyyy-MM-dd")</td>
                    <td>@reservation.Status</td>
                    <td>
                        @if (reservation.BookingNr.HasValue)
                        {
                        <button class="btn btn-primary" @onclick="() => ReturnCarBooking(reservation.BookingNr.Value)">Return Car</button>
                        }
                        else
                        {
                        <span class="text-muted">Invalid Booking ID</span>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<p>@message</p>

@code {
    private List<BookingDto> reservations = new();
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadReservations();
    }

    private async Task LoadReservations()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var allBookings = await client.GetFromJsonAsync<List<BookingDto>>("api/bookingcar");

            var customerId = await GetCurrentCustomerIdAsync();

            // Filter bookings by CustomerId
            reservations = allBookings.Where(booking => booking.CustomerId == customerId).ToList();

            if (!reservations.Any())
            {
                message = "No reservations found. You have not rented any cars.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading reservations: {ex.Message}";
        }
    }


    private async Task ReturnCarBooking(int bookingId)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var response = await client.PostAsync($"api/bookingcar/{bookingId}/return", null);

            if (response.IsSuccessStatusCode)
            {
                message = "Car successfully returned.";
                await LoadReservations(); // Refresh the reservations list
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                message = $"Failed to return car: {errorResponse}";
            }
        }
        catch (Exception ex)
        {
            message = $"Error returning car: {ex.Message}";
        }
    }

    private async Task<int> GetCurrentCustomerIdAsync()
    {
        // Fetch the customer ID from the authentication token
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var customerIdClaim = user.FindFirst("id");
        if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out var customerId))
        {
            return customerId;
        }

        throw new InvalidOperationException("Unable to retrieve CustomerId from claims.");
    }
}
