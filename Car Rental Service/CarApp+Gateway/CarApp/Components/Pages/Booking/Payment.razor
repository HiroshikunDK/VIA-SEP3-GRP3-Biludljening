@page "/payment/{bookingId:int}"
@using System.Text.Json
@using CarApp.Services.Payment
@using Microsoft.AspNetCore.Components.Authorization
@using Shared.Dto
@using Shared.Dto.Payment
@inject IPaymentService PaymentService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Payment</h3>

<EditForm Model="payment" OnValidSubmit="SubmitPayment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Credit Card Number:</label>
        <InputText @bind-Value="creditCardNumber" />
        @if (validationErrors.ContainsKey(nameof(PaymentDto.CreditCardRef)))
        {
            <div class="validation-message">@validationErrors[nameof(PaymentDto.CreditCardRef)]</div>
        }
    </div>

    <div>
        <label>Expiration Date (MM/YY):</label>
        <InputText @bind-Value="expirationDate" />
        @if (validationErrors.ContainsKey(nameof(PaymentDto.ExpirationDate)))
        {
            <div class="validation-message">@validationErrors[nameof(PaymentDto.ExpirationDate)]</div>
        }
    </div>

    <button type="submit">Pay</button>
</EditForm>

@code {
    [Parameter] public int BookingId { get; set; }

    private PaymentDto payment = new();
    private string creditCardNumber = string.Empty;
    private string expirationDate = string.Empty;

    // A dictionary to hold validation errors returned from the broker
    private Dictionary<string, string> validationErrors = new();

    private async Task SubmitPayment()
    {
        validationErrors.Clear(); // Clear previous errors

        payment.BookingId = BookingId;
        payment.Status = "Pending";

        // Validate and sanitize credit card number
        string sanitizedCreditCardNumber = creditCardNumber.Replace(" ", "").Trim();
        if (!long.TryParse(sanitizedCreditCardNumber, out long creditCardRef))
        {
            validationErrors[nameof(PaymentDto.CreditCardRef)] = "Credit Card Number must be numeric.";
            return;
        }
        payment.CreditCardRef = creditCardRef;

        // Add additional fields
        payment.CustomerId = await GetCurrentCustomerIdAsync();
        payment.ExpirationDate = expirationDate;

        try
        {
            var response = await PaymentService.CreatePaymentAsync(payment);

            if (response?.PaymentId > 0)
            {
                // Redirect to confirmation page
                NavigationManager.NavigateTo($"/confirmation?bookingId={BookingId}&paymentId={response.PaymentId}");
            }
            else if (response?.Errors != null && response.Errors.Any())
            {
                // Process validation errors returned by the broker
                foreach (var error in response.Errors)
                {
                    if (error.Contains("Credit Card")) // Match error message to field
                        validationErrors[nameof(PaymentDto.CreditCardRef)] = error;
                    else if (error.Contains("Expiration Date"))
                        validationErrors[nameof(PaymentDto.ExpirationDate)] = error;
                }
            }
            else
            {
                validationErrors["General"] = "Payment creation failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            validationErrors["General"] = $"An unexpected error occurred: {ex.Message}";
        }
    }


    private async Task<int> GetCurrentCustomerIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var customerIdClaim = user.FindFirst("id");
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out int customerId))
            {
                return customerId;
            }
        }

        throw new InvalidOperationException("Unable to retrieve CustomerId from claims.");
    }
}
