@page "/carselection"
@using Shared.Dto.Car
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<h3>Search for a Car</h3>

<div>
    <input type="text" @bind="_searchTerm" placeholder="Search by VIN, Model, or Manufacturer" class="form-control mb-3" />
    <button class="btn btn-secondary mb-3" @onclick="ClearSearch">Clear Search</button>
</div>

<h3>Select a Car</h3>

@if (_cars == null)
{
    <p>Loading...</p>
}
else if (!FilteredCars.Any())
{
    <p>No cars available.</p>
}
else
{
    <div class="car-list">
        @foreach (var car in FilteredCars)
        {
            <div class="car-item">
                <h4>@car.Manufacturer @car.Model (@car.YearProduced) (@car.AltName)</h4>
                <p><strong>VIN:</strong> @car.Vin</p>
                <p><strong>Color:</strong> @car.Color</p>
                <p><strong>Seats:</strong> @car.Seats</p>
                <p><strong>Range:</strong> @car.CarRange km</p>
                <p><strong>Location:</strong> Hub #@car.LocationHubRef</p>
                <p><strong>Availability:</strong> @(car.IsAvailable ? "Available" : "Rented")</p>
                <button 
                    class="btn btn-primary" 
                    @onclick="() => SelectCar(car.CarId)" 
                    disabled="@(car.IsAvailable == false)">
                    @if (car.IsAvailable)
                    {
                        <text>Select</text>
                    }
                    else
                    {
                        <text>Unavailable</text>
                    }
                </button>
                <p>---------------------------------------------------------------------</p>
            </div>
        }
    </div>
}

@code {
    private List<CarDto> _cars = new();
    private string? _errorMessage;
    private string _searchTerm = string.Empty;

    // Filtered list based on search term
    private IEnumerable<CarDto> FilteredCars =>
        string.IsNullOrWhiteSpace(_searchTerm)
            ? _cars
            : _cars.Where(car =>
                (car.Vin?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (car.Model?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (car.Manufacturer?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));

    protected override async Task OnInitializedAsync()
    {
        await LoadAllCars();
    }

    private async Task LoadAllCars()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            _cars = await client.GetFromJsonAsync<List<CarDto>>("api/car");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching cars: {ex.Message}");
            _errorMessage = "Failed to load cars.";
        }
    }

    private void ClearSearch()
    {
        _searchTerm = string.Empty;
    }

    private void SelectCar(int carId)
    {
        NavigationManager.NavigateTo($"/booking-details/{carId}");
    }
}
